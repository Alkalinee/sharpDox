The config namespace provides the interface to implement custom config
sections in the **sharpDox** config file.

Following an example how to implement a config section with a single config item:

	using System;
	using System.ComponentModel;
	using SharpDox.Sdk.Config;
	using SharpDox.Sdk.Config.Attributes;
	
	namespace ExamplePlugin
	{
		[Name(typeof(ExampleStrings), "ExampleConfig")]
	    public class ExampleConfig : IConfigSection
	    {
	        public event PropertyChangedEventHandler PropertyChanged;
	        protected void OnPropertyChanged(string propertyName)
	        {
	            var handler = PropertyChanged;
	            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
	        }
	
	        private string _exampleItem;
	
			[Required]
			[Name(typeof(ExampleStrings), "ExampleItem")]
	        public string ExampleItem
	        {
	            get { return _exampleItem; }
	            set
	            {
	                _exampleItem = value;
	                OnPropertyChanged("ExampleItem");
	            }
	        }
	
	        public Guid Guid { get { return new Guid("XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXXX"); } }         
	    }
	}

To get access to a config section feed the constructor of your plugin with it. **sharpDox** takes care that the plugin will get the instance of the current config section. Following an example how to get a config section:

	using SharpDox.Model;
	using SharpDox.Model.Repository;
	using SharpDox.Sdk.Exporter;
	using System;

	namespace ExampleExporter
	{
	    public class ExampleExporter : IExporter
	    {
			public event Action<string> OnRequirementsWarning;
	        public event Action<string> OnStepMessage;
	        public event Action<int> OnStepProgress;
	
			private readonly ExampleConfig _exampleConfig;
	
			//Fill the constructor with the config section
	        public ExampleExporter(ExampleConfig exampleConfig)
	        {
	            _exampleConfig = exampleConfig;
	        }
	
			public bool CheckRequirements()
			{
				// Check for requirements
			}
	
	        public void Export(SDProject sdProject, string outputPath)
	        {
	            //Exportcode
	        }
	
	        public string ExporterName { get { return "example"; } }
	    }
	}

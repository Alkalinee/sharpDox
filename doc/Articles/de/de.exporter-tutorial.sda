Dieses Tutorial soll einen Überblick darüber geben, wie einfach neue Plugins für *sharpDox*
erstellt werden können. Dafür wird ein Plugin erstellt, welches eine neue Einstellung registriert
und einen CSV Export für alle Methoden erstellt.

Dazu wird zunächst ein neues Klassenbiliotheks-Projekt in Visual Studio angelegt. Benötigt 
werden Verweise auf `SharpDox.Model` und `SharpDox.Sdk`. 
Der erste Schritt ist die Erstellung der Konfigurationsklasse. Dazu wird eine neue Klasse 
`CSVConfig.cs` mit folgendem Inhalt angelegt:

	using System;
	using System.ComponentModel;
	using SharpDox.Sdk.Config;
	using SharpDox.Sdk.Config.Attributes;

	// Diese Klasse implementiert das IConfigSection Interface.
    // Mit dem Name-Attribute der Klasse wird der Gruppenname innerhalb der GUI gesetzt.
    // Dieser muss angegeben werden, da die Konfiguration ansonsten nicht angezeigt wird!
    // Der zweite Parameter des Attributs gibt den Namen der String-Property innerhalb des Typen
	// CSVStrings an.
	[Name(typeof(CSVStrings), "CSV")]
	namespace CSVExporter
	{
		// Die Klasse implementiert das Interface IConfigSection
		public class CSVConfig : IConfigSection
		{
			// An diesem Event registriert sich der ConfigController und sollte
			// bei der Änderungen einer Einstellung aufgerufen werden. Damit
			// wird der ConfigController über die Änderung informiert.
			public event PropertyChangedEventHandler PropertyChanged;
			protected void OnPropertyChanged(string propertyName)
			{
				PropertyChangedEventHandler handler = PropertyChanged;
				if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
			}

			// Die ist die eigentliche Einstellung.
			private string _divider = string.Empty;
			
			// Ein paar Attribute für das Propertygrid der GUI
			[Required]
			[Name(typeof(CSVStrings), "Divider")]
			public string Divider { get { return _divider; } set { _divider = value; OnPropertyChanged("Divider"); } }

			// Hier muss eine GUID eingefügt werden.
			// GUIDs können z.B. auf www.guidgen.com generiert werden.
			// Diese wird genutzt, um die Einstellungen in der 
			// gespeicherten .sharpDox Konfiguration zu identifizieren.
			public Guid Guid { get { return new Guid("463e2a9d-5d26-42ac-8a02-012928988c79"); } }
		}
	}

In diesem Beispiel wird lediglich eine Einstellung zur Angabe des Trennzeichens hinzugefügt. 
Durch die Angaben der Attribute wird die Konfiguration automatisch im Propertygrid der GUI angezeigt und
in der Konfigurationsdatei von *sharpDox* integriert.

Als nächstes wird die `CSVStrings` Klasse erstellt.

	using SharpDox.Sdk.Local;

	namespace CSVExporter
	{
		public class CSVStrings : ILocalStrings
		{
			// Strings mit der Standardübersetzung
			private string _csv = "CSV";
			private string _divider = "Divider";

			// Erstellen einer Eigenschaft.
			// Keine Auto-Properties, da sonst die Übersetzung nicht funktioniert.

			public string CSV
			{
				get { return _csv; }
				set { _csv = value; }
			}

			public string Divider
			{
				get { return _divider; }
				set { _divider = value; }
			}

			// Setzen des Namens der Sprachdatei
			public string DisplayName { get { return "CSV"; } }
		}
	}


Der letzte Schritt zur Erstellung des CSV Exporters ist der Exportvorgang selbst. Dazu wird eine 
Datei `CSVExport.cs` mit folgendem Inhalt erstellt:

	using SharpDox.Model;
	using SharpDox.Model.Repository;
	using SharpDox.Sdk.Exporter;
	using System;
	using System.IO;
	using System.Linq;

	namespace CSVExporter
	{
		public class CSVExport : IExporter
		{
			/// <summary>
			/// An diesem Event lauscht sharpDox, um über Warnungen während
			/// der Überprüfung der Vorraussetzungen benachrichtigt zu werden.
			/// Sollte eine Warnung auftreten, wird der Bauvorgang abgebrochen.
			public event Action<string> OnRequirementsWarning;
			
			/// <summary>
			/// An diesem Event lauscht sharpDox, um über Statusnachrichten
			/// beachrichtigt zu werden. Die Nachrichten werden im 
			/// Fortschrittsbalken angezeigt.
			/// </summary>
			public event Action<string> OnStepMessage;
			
			/// <summary>
			/// An diesem Event lauscht sharpDox, um über Statusaktualisierungen
			/// beachrichtigt zu werden. Diese lassen den sekundären Fortschrittsbalken
			/// fortschreiten.
			/// </summary>
			public event Action<int> OnStepProgress;

			private readonly CSVConfig _csvConfig;

			public CSVExport(CSVConfig csvConfig)
			{
				// Holen unserer Konfiguration
				_csvConfig = csvConfig;
			}

			// Die Export Funktion bekommt das eingelesene Projekt und 
			// einen Ausgabepfad übergeben. Nun kann mit den Entitäten im Repository
			// verfahren werden wie es gewünscht ist. In diesem Fall wird für jeden 
			// nicht projektfremden Typen ein Eintrag in einer CSV Datei erstellt.
			// Diese wird dann im Ausgabepfad gespeichert.
			public void Export(SDProject sdProject, string outputPath)
			{
				var csv = string.Empty;
				var types = sdProject.Repositories.Values.Single().GetAllTypes().OfType<SDType>().Where(o => !o.IsProjectStranger);
				
				foreach (var type in types)
				{
					ExecuteOnStepMessage("Erstelle Eintrag für " + type.Fullname);
					csv += string.Format("{1}{0}{2}{0}{3}", _csvConfig.Divider, type.Fullname, type.Name, type.Namespace) + System.Environment.NewLine;
				}

				File.WriteAllText(Path.Combine(outputPath, "methods.csv"), csv);
			}

			private void ExecuteOnStepMessage(string message)
			{
				var handler = OnStepMessage;
				if (handler != null)
				{
					handler(message);
				}
			}

			private void ExecuteOnStepProgress(int progress)
			{
				var handler = OnStepProgress;
				if (handler != null)
				{
					handler(progress);
				}
			}

			// Der Name wird des Exporter wird als Unterordner im Ausgabepfad erzeugt.
			// Der komplette Ausgabepfad wird der Export-Funktion übergeben.
			public string ExporterName { get { return "csv"; } }
		}
	}

Damit wäre ein komplettes, rudimentäres Plugin für *sharpDox* fertiggestellt. Die resultierende 
DLL-Datei wird anschließend einfach in den *plugin* Ordner von *sharpDox* kopiert. 
Damit wird das Plugin beim Start registriert. Das Beispiel auf dieser Seite kann 
[hier](https://github.com/Geaz/SharpDox.Examples.Plugins.CVS "CSV-Exporter") heruntergeladen werden.
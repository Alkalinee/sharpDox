This tutorial gives an overview about creating custom exporters for **sharpDox**. To accomplish this 
task we will develop a plugin which creates own settings and an exporter to 
create a csv output for each method in a solution.

First of all create a library project in Visual Studio and reference the _SharpDox.Model_ and 
_SharpDox.Sdk_. In the first step we create the config 
class. Create a class _CSVConfig.cs_ with the following content:

	using System;
	using System.ComponentModel;
	using SharpDox.Sdk.Config;
	using SharpDox.Sdk.Config.Attributes;

	namespace CSVExporter
	{
		// The class implements the interface IConfigSection
		// Set the group name for the propertygrid.
		// Otherwise your configuration settings will not be shown!
		// Use the property name of the string as the second parameter.
		[Name(typeof(CSVStrings), "CSV")]
		public class CSVConfig : IConfigSection
		{
			// The ConfigController will register on this event to get notified
			// about any changes.
			public event PropertyChangedEventHandler PropertyChanged;
			protected void OnPropertyChanged(string propertyName)
			{
				PropertyChangedEventHandler handler = PropertyChanged;
				if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
			}

			// This is our new configitem
			private string _divider = string.Empty;

			// We define some attribute for the property grid
			[Required]
			[Name(typeof(CSVStrings), "Divider")]
			public string Divider { get { return _divider; } set { _divider = value; OnPropertyChanged("Divider"); } }

			// This guid identifies the configsection in 
			// the config file.
			public Guid Guid { get { return new Guid("463e2a9d-5d26-42ac-8a02-012928988c79"); } }
		}
	}

In this plugin we only create a setting to define the divider for the csv file. Because of the given attributes
**sharpDox** knows how to integrate the settings into the propertygrid.

Next create the _CSVStrings_ class.

	using SharpDox.Sdk.Local;

	namespace CSVExporter
	{
		public class CSVStrings : ILocalStrings
		{
			// Strings with a default translation
			private string _csv = "CSV";
			private string _divider = "Divider";

			// Create a property for the strings.
			// Do not use auto-properties. 
			// Otherwise your default translation will not work!

			public string CSV
			{
				get { return _csv; }
				set { _csv = value; }
			}

			public string Divider
			{
				get { return _divider; }
				set { _divider = value; }
			}

			// Set the name of the language file
			public string DisplayName { get { return "CSV"; } }
		}
	}

The last step is to create the csv exporter. Create a new class _CSVExport.cs_ with the following content:

	using SharpDox.Model;
	using SharpDox.Model.Repository;
	using SharpDox.Sdk.Exporter;
	using System;
	using System.IO;
	using System.Linq;

	namespace CSVExporter
	{
		public class CSVExport : IExporter
		{
			/// <summary>
			/// sharpDox listens on this event to get any warnings.
			/// All messages will be shown in the build window.
			/// </summary>
			public event Action<string> OnRequirementsWarning;

			/// <summary>
			/// sharpDox listens on this event to get any status
			/// messages. All messages will be shown in the progressbar.
			/// </summary>
			public event Action<string> OnStepMessage;
			
			/// <summary>
			/// sharpDox listens on this event to get any status update.
			/// This event will move forward the secondary progressbar.
			/// </summary>
			public event Action<int> OnStepProgress;

			private readonly CSVConfig _csvConfig;

			public CSVExport(CSVConfig csvConfig)
			{
				// Get our new configuration
				_csvConfig = csvConfig;
			}

			// This function just returns true. No requirements to check for.
			public bool CheckRequirements()
			{
				return true;
			}

			// The export function gets the parsed solution and the output path.
			public void Export(SDProject sdProject, string outputPath)
			{
				var csv = string.Empty;
				var types = sdProject.Repositories.Values.Single().GetAllTypes().OfType<SDType>().Where(o => !o.IsProjectStranger);
				
				foreach (var type in types)
				{
					ExecuteOnStepMessage("Creating entry for " + type.Fullname);
					csv += string.Format("{1}{0}{2}{0}{3}", _csvConfig.Divider, type.Fullname, type.Name, type.Namespace) + System.Environment.NewLine;
				}

				File.WriteAllText(Path.Combine(outputPath, "methods.csv"), csv);
			}

			private void ExecuteOnStepMessage(string message)
			{
				var handler = OnStepMessage;
				if (handler != null)
				{
					handler(message);
				}
			}

			private void ExecuteOnStepProgress(int progress)
			{
				var handler = OnStepProgress;
				if (handler != null)
				{
					handler(progress);
				}
			}

			// The name of the exporter will be used to 
			// create a subdirectory in the output path.
			public string ExporterName { get { return "CSV"; } }
		}
	}

This is the complete, simple plugin for **sharpDox**. Just copy the created dll file into the 
_plugin_ folder of **sharpDox**. This way **sharpDox** knows about the plugin and will register 
it at the start. Please download the example on this site [here](https://github.com/Geaz/SharpDox.Examples.Plugins.CVS "CSV-Exporter").
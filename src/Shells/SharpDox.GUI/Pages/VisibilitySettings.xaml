<UserControl x:Class="SharpDox.GUI.Pages.VisibilitySettings"
             x:Name="Window"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:treeview="clr-namespace:SharpDox.GUI.ViewModels.TreeModel"
             xmlns:converter="clr-namespace:SharpDox.Resources.Converter;assembly=SharpDox.Resources"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="350">

    <UserControl.Resources>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BoolToVis"/>
            <converter:BoolToForegroundConverter x:Key="BoolToForegroundConverter" FalseValue="{StaticResource Color_BodyFont}" TrueValue="{StaticResource Color_FadedFont}" />
            <converter:BoolToStringConverter x:Key="BoolToStringConverter" FalseValue="&#xF06E;" TrueValue="&#xF070;" />
            <converter:MultiBoolToForegroundConverter x:Key="MultiBoolToForeground"/>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/SharpDox.Resources;component/SharpDox.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid Name="mainGrid" Width="350" HorizontalAlignment="Stretch" Height="450">
        <TreeView Margin="0,0,55,15" Name="treeView1" ItemsSource="{Binding TreeView}" BorderBrush="{StaticResource BorderColor_MainWindow}">
            <TreeView.Resources>
                
                <SolidColorBrush Color="Transparent" x:Key="{x:Static SystemColors.HighlightBrushKey}"/>
                
                <Style x:Key="ExcludeToggleButton" TargetType="ToggleButton">
                    <Setter Property="IsChecked" Value="{Binding IsExcluded, UpdateSourceTrigger=PropertyChanged}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ToggleButton">
                                <Grid Background="Transparent" Margin="0,-2,3,0">
                                    <Border x:Name="Border" Background="Transparent" BorderBrush="{StaticResource BorderColor_MainWindow}" BorderThickness="1">
                                        <Label x:Name="Eye" FontFamily="{StaticResource Font_Icons}" Content="{Binding IsExcluded, Converter={StaticResource BoolToStringConverter}, UpdateSourceTrigger=PropertyChanged}">
                                            <Label.Foreground>
                                                <MultiBinding Converter="{StaticResource MultiBoolToForeground}">
                                                    <Binding Path="IsExcluded" UpdateSourceTrigger="PropertyChanged" />
                                                    <Binding Path="HasExcludedChild" UpdateSourceTrigger="PropertyChanged" />
                                                </MultiBinding>
                                            </Label.Foreground>
                                        </Label>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" TargetName="Border" Value="{StaticResource Color_Main}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>    
                </Style>
                
                <HierarchicalDataTemplate DataType="{x:Type treeview:TreeViewItemViewModel}" ItemsSource="{Binding Children}">    
                    <StackPanel Orientation="Horizontal">
                        <ToggleButton Style="{StaticResource ExcludeToggleButton}"/>
                        <Image Width="16" Height="16" Margin="0,0,3,0" Source="{Binding Image}" />
                        <TextBlock Text="{Binding Text}"/>
                    </StackPanel>
                </HierarchicalDataTemplate>
                
            </TreeView.Resources>
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="Foreground" Value="{Binding IsExcluded, Converter={StaticResource BoolToForegroundConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    <Setter Property="FontSize" Value="13" />
                    <Setter Property="FontFamily" Value="{StaticResource Font_Regular}" />
                    <Setter Property="Padding" Value="5"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{Binding IsExcluded, Converter={StaticResource BoolToForegroundConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>
 
        <Border Visibility="{Binding Path=IsTreeRefreshing, Converter={StaticResource BoolToVis}, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,55,15" BorderBrush="Silver" BorderThickness="1" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Background="#78000000">
            <StackPanel VerticalAlignment="Center">
                <Label FontFamily="{StaticResource Font_Icons}" Content="&#xF021;" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Stretch" VerticalContentAlignment="Center" RenderTransformOrigin="0.5,0.5">
                    <Label.RenderTransform>
                        <RotateTransform />
                    </Label.RenderTransform>
                    <Label.Style>
                        <Style BasedOn="{StaticResource BodyText}" TargetType="Label">
                            <Setter Property="Foreground" Value="White" />
                            <Setter Property="FontSize" Value="18" />
                            <Style.Triggers>
                                <Trigger Property="Visibility" Value="Visible">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)" From="0" To="360" Duration="0:0:1" RepeatBehavior="Forever" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Label.Style>
                </Label>
                <Label Content="{Binding ElementName=Window, Path=Strings.PleaseWait}" Style="{StaticResource BodyText}" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center" />
                <Label Content="{Binding ElementName=Window, Path=Strings.SeeBuild}" FontSize="11" Style="{StaticResource BodyText}" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center" />
            </StackPanel>
        </Border>

        <StackPanel Margin="0,0,15,15" HorizontalAlignment="Right" VerticalAlignment="Top">
            <Button ToolTip="{Binding ElementName=Window, Path=Strings.RefreshTree}" Command="{Binding RefreshCommand}" Style="{StaticResource IconButton}" BorderThickness="1" Margin="0,0,0,0" Content="&#xF021;"></Button>
        </StackPanel>
        
        <StackPanel Margin="0,0,15,15" HorizontalAlignment="Right" VerticalAlignment="Bottom">
            <Button ToolTip="{Binding ElementName=Window, Path=Strings.IncludeAll}" Command="{Binding IncludeAllCommand}" Style="{StaticResource IconButton}" BorderThickness="1" Margin="0,5,0,0" Content="&#xF14A;"></Button>
            <Button ToolTip="{Binding ElementName=Window, Path=Strings.HidePrivate}" Command="{Binding ShowHideCommand}" CommandParameter="private" Style="{StaticResource IconButton}" BorderThickness="1" Margin="0,5,0,0" Content="&#xF084;"></Button>
            <Button ToolTip="{Binding ElementName=Window, Path=Strings.HideProtected}" Command="{Binding ShowHideCommand}" CommandParameter="protected" Style="{StaticResource IconButton}" BorderThickness="1" Margin="0,5,0,0" Content="&#xF023;"></Button>
            <Button ToolTip="{Binding ElementName=Window, Path=Strings.HideInternal}" Command="{Binding ShowHideCommand}" CommandParameter="internal" Style="{StaticResource IconButton}" BorderThickness="1" Margin="0,5,0,0" Content="&#xF187;"></Button>
        </StackPanel>
    </Grid>
</UserControl>

<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:converter="clr-namespace:SharpDox.GUI.Resources.Converter"
        xmlns:controls="clr-namespace:SharpDox.GUI.Controls"
        x:Class="SharpDox.GUI.Shell" x:Name="Window"
        Title="SharpDox" mc:Ignorable="d"
        WindowStartupLocation="Manual" Height="600" Width="500"
        FontSize="12" MinWidth="500" MinHeight="600" Left="300" Top="300" Background="White">

    <Window.Resources>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BoolToVis"/>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/SharpDox.GUI;component/Resources/SharpDox.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="50" />
            <RowDefinition Height="30" />
        </Grid.RowDefinitions>

        <!-- InfoHeader -->
        <Grid Grid.Row="0" Background="{StaticResource Color_Main}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <Label Margin="12,0" x:Name="lblConfigName" Style="{StaticResource Headline}">
                <Label.Resources>
                    <converter:BoolToStringConverter x:Key="BoolToStringConverter" FalseValue="*" TrueValue="" />
                </Label.Resources>
                <Label.Content>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Path="Config.ConfigFileName" />
                                <Binding Path="Config.IsSaved" Converter="{StaticResource BoolToStringConverter}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </Label.Content>
            </Label>

            <Menu Grid.Column="1" Margin="0,17,5,0" HorizontalAlignment="Right" Height="25" VerticalAlignment="Top" Background="Transparent">
                <Menu.Resources>
                    <Style TargetType="MenuItem">
                        <Setter Property="FontFamily" Value="{StaticResource Font_Icons}"/>
                        <Setter Property="Foreground" Value="{StaticResource Color_BodyFont}"/>
                        <Setter Property="Header" Value="{Binding Text}"/>
                        <Setter Property="Command" Value="{Binding Command}"/>
                    </Style>
                    <ControlTemplate x:Key="MenuItemControlTemplate" TargetType="{x:Type MenuItem}">
                        <Border x:Name="templateRoot" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                                    <Border x:Name="SubMenuBorder" BorderBrush="#FF999999" BorderThickness="1" Background="#FFF0F0F0" Padding="2">
                                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                </Canvas>
                                                <Rectangle Fill="#FFD7D7D7" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                            </Trigger>
                            <Trigger Property="Icon" Value="{x:Null}"/>
                            <Trigger Property="IsChecked" Value="True"/>
                            <Trigger Property="IsHighlighted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderThickness" Value="0"/>
                                <Setter Property="Foreground" Value="{StaticResource Color_MouseOverFont}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Foreground" Value="{StaticResource Color_Blue}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                            </Trigger>
                            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Menu.Resources>
                <MenuItem Header="&#xF15C;" Template="{DynamicResource MenuItemControlTemplate}">
                    <MenuItem Header="{Binding Path=Strings.New}" Command="{Binding NewConfigCommand}"/>
                    <MenuItem Header="{Binding Path=Strings.Load}" Command="{Binding LoadConfigCommand}"/>
                    <Separator/>
                    <MenuItem Header="{Binding Path=Strings.Save}" Command="{Binding SaveConfigCommand}"/>
                    <MenuItem Header="{Binding Path=Strings.SaveAs}" Command="{Binding SaveToConfigCommand}"/>
                    <Separator Visibility="{Binding IsRecentProjectsVisible, Converter={StaticResource BoolToVis}, UpdateSourceTrigger=PropertyChanged}" />
                    <MenuItem Header="{Binding Path=Strings.RecentProjects}" Visibility="{Binding IsRecentProjectsVisible, Converter={StaticResource BoolToVis}, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding RecentProjects}">
                    </MenuItem>
                </MenuItem>
            </Menu>

        </Grid>

        <!-- Body -->
        <ScrollViewer Grid.Row="1" Name="svBody">
        </ScrollViewer>

        <!-- Footer -->
        <Border Grid.Row="2" Background="{StaticResource BackColor_MainWindow}" BorderBrush="{StaticResource Color_Main}" BorderThickness="0,1,0,0" VerticalAlignment="Top">
            <Grid Height="50">
                <Grid Background="#33FFFFFF">
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Button Content="{Binding ProgressBarViewModel.BuildButtonText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding BuildButtonCommand}" Style="{StaticResource BigButton}" Grid.Column="0" />
                        <Button Content="&#xf14c;" Command="{Binding OpenBuildWindowCommand}" Style="{StaticResource IconButtonNoBorder}" Grid.Column="1" VerticalAlignment="Bottom" Width="15" Margin="-2,0,0,-2"  FontSize="10" />
                    </Grid>
                </Grid>
            </Grid>
        </Border>

        <!-- Progress -->
        <Border Grid.Row="3" Background="{StaticResource BackColor_MainWindow}" BorderBrush="{StaticResource BorderColor_MainWindow}" BorderThickness="0,1,0,0" VerticalAlignment="Top">
            <Grid Height="30">
                <ProgressBar Name="pbBuildProgress" Foreground="{Binding ProgressBarViewModel.ProgressColor, UpdateSourceTrigger=PropertyChanged}" Value="{Binding ProgressBarViewModel.BuildProgress, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ProgressBar}" BorderThickness="0" Height="15" VerticalAlignment="Top" SmallChange="1"/>
                <ProgressBar Name="pbStepProgress" Foreground="{Binding ProgressBarViewModel.ProgressColor, UpdateSourceTrigger=PropertyChanged}" Value="{Binding ProgressBarViewModel.StepProgress, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ProgressBar}" BorderThickness="0" Height="15" VerticalAlignment="Bottom" SmallChange="1"/>
                <Label Content="{Binding StepMessage, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource Small}" VerticalAlignment="Center" Margin="55,0,5,0"/>

                <Grid Width="50" HorizontalAlignment="Left">
                    <Label Foreground="#FF545454" Visibility="{Binding ProgressBarViewModel.StaticIndicatorVisible, Converter={StaticResource BoolToVis}, UpdateSourceTrigger=PropertyChanged}" FontFamily="{StaticResource Font_Icons}" Content="{Binding ProgressBarViewModel.ProgressIndicator, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Stretch" VerticalContentAlignment="Center"/>
                    <Label Foreground="#FF545454" Visibility="{Binding ProgressBarViewModel.DynamicIndicatorVisible, Converter={StaticResource BoolToVis}, UpdateSourceTrigger=PropertyChanged}" FontFamily="{StaticResource Font_Icons}" Content="{Binding ProgressBarViewModel.ProgressIndicator, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Stretch" VerticalContentAlignment="Center" RenderTransformOrigin="0.5,0.5">
                        <Label.RenderTransform>
                            <RotateTransform />
                        </Label.RenderTransform>
                        <Label.Style>
                            <Style BasedOn="{StaticResource BodyText}" TargetType="Label">
                                <Setter Property="Foreground" Value="Black" />
                                <Setter Property="FontSize" Value="14" />
                                <Style.Triggers>
                                    <Trigger Property="Visibility" Value="Visible">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)" From="0" To="360" Duration="0:0:1" RepeatBehavior="Forever" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                </Grid>
            </Grid>
        </Border>
    </Grid>
</Window>

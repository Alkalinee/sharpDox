<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Plugins.Chm.Templates.Strings" #>
<#@ import namespace="SharpDox.Sdk.Config" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="MarkdownSharp" #>

<html>
    <head>
        <title><#= SDType.Name #></title>
        <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
        <link rel="stylesheet" type="text/css" href="css/reset.css">
        <link rel="stylesheet" type="text/css" href="css/style.css">
        <script src="js/jquery.js" type="text/javascript"></script>
        
        <script type="text/javascript">
            $(document).ready(function() {
                
            });
        </script>

    </head>
    <body>
		<div id="header">
			<h2 class="type-title"><#= SDType.Name #></h2>
			<span class="namespace-title"><#= SDType.Namespace.Fullname #></span>
		</div>
		<div id="subheader">
			<a href="<#= SDRepository.ProjectInfo.ProjectName.Replace(" ", "") #>-Index.html">Start</a> > <a href="<#= SDType.Namespace.Guid #>.html"><#= SDType.Namespace.Fullname #></a> > <a href="<#= SDType.Guid #>.html"><#= SDType.Name #></a>
		</div>
		
		<div id="content">

			<h3 class="box-title"><#= Strings.Syntax #></h3>
			<div class="syntax-box">
				<#= WebUtility.HtmlEncode(SDType.Syntax) #>
			</div>

			<# if(SDType.BaseTypes.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Basetype #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var baseType in SDType.BaseTypes) { 
						if(baseType.IsProjectStranger) { #>
							<li><#= baseType.Fullname #></a></li>
						<# } else { #>
							<li><a href="<#= baseType.Guid #>.html"><#= baseType.Fullname #></a></li>
						<# } #>
					<# } #>
					</ul>
				</div>
			<# } #>

			<# if(SDType.ImplementedInterfaces.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Implements #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var implementedInterface in SDType.ImplementedInterfaces) {
						if(implementedInterface.IsProjectStranger) { #>
							<li><#= implementedInterface.Fullname #></a></li>
						<# } else { #>
							<li><a href="<#= implementedInterface.Guid #>.html"><#= implementedInterface.Fullname #></a></li>
						<# } #>
					<# } #>
					</ul>
				</div>
			<# } #>

			<# var language = SDType.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default";
			if(SDType.Documentation.Count > 0) { #>

				<# if(SDType.Documentation[language].Summary.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Summary #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[language].Summary.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[language].Remarks.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Remarks #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[language].Remarks.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[language].Example.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Example #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[language].Example.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[language].Returns.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Returns #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[language].Returns.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[language].Exceptions.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Exceptions #></h3>
					<div class="doc-box markdown">
						<# foreach(var exception in SDType.Documentation[language].Exceptions) { #>
							<p><#= exception.Key #></p>
							<div class="inline">
								<#= new Markdown().Transform(exception.Value.ToMarkdown()) #>
							</div>
						<# } #>
					</div>
				<# } #>

				<# if(SDType.Documentation[language].Params.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Parameters #></h3>
					<div class="doc-box markdown">
						<# foreach(var parameter in SDType.Documentation[language].Params) { #>
							<p><#= parameter.Key #></p>
							<div class="inline">
								<#= new Markdown().Transform(parameter.Value.ToMarkdown()) #>
							</div>
						<# } #>
					</div>
				<# } #>

				<# if(SDType.Documentation[language].TypeParams.Count > 0) { #>
					<h3 class="box-title"><#= Strings.TypeParameters #></h3>
					<div class="doc-box markdown">
						<# foreach(var typeParameter in SDType.Documentation[language].TypeParams) { #>
							<p><#= typeParameter.Key #></p>
							<div class="inline">
								<#= new Markdown().Transform(typeParameter.Value.ToMarkdown()) #>
							</div>
						<# } #>
					</div>
				<# } #>

			<# } #>

			<# if(SDType.Uses.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Uses #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var use in SDType.Uses) { #>
						<li><a href="<#= use.Guid #>.html"><#= use.Name #></a></li>
					<# } #>
					</ul>
				</div>
			<# } #>

			<# if(SDType.UsedBy.Count > 0) { #>
				<h3 class="box-title"><#= Strings.UsedBy #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var used in SDType.UsedBy) { #>
						<li><a href="<#= used.Guid #>.html"><#= used.Name #></a></li>
					<# } #>
					</ul>
				</div>
			<# } #>

			<#	if(!SDType.IsClassDiagramEmpty()) { #>
				<div class="diagram-box">
					<img class="diagram-image" src="diagrams/<#= SDType.Guid #>.png"/>
				</div>
			<# } #>
		</div>
    </body>
</html>

<#+ 
public SDRepository SDRepository { get; set; }
public SDType SDType { get; set; } 
public string CurrentLanguage { get; set; }
public IStrings Strings { get; set; }
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Repository.Members" #>
<#@ import namespace="SharpDox.Sdk.Config" #>
<#@ import namespace="SharpDox.Sdk" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="MarkdownSharp" #>
<#@ import namespace="SharpDox.Plugins.Html.Templates.Strings" #> 

<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title><#= Repository.ProjectInfo.ProjectName #> - <#= SDMember.Name #></title>
        <meta name="viewport" content="width=device-width">

		<link rel="stylesheet" type="text/css" href="../stylesheets/reset.css" />
		<link rel="stylesheet" type="text/css" href="../stylesheets/font.css" />
		<link rel="stylesheet" type="text/css" href="../stylesheets/font-awesome.css" />
		<link rel="stylesheet" type="text/css" href="../stylesheets/typography.css" />
		<link rel="stylesheet" type="text/css" href="../stylesheets/layout.css" />
		<link rel="stylesheet" type="text/css" href="../stylesheets/elements.css" />
		<link rel="stylesheet" type="text/css" href="../stylesheets/markdown.css" />
		<link rel="stylesheet" type="text/css" href="../stylesheets/vs.css" />

		<script src="../js/vendor/jquery.js"></script>
		<script src="../js/vendor/jquery.mousewheel.js"></script>
		<script src="../js/vendor/jquery.panzoom.min.js"></script>
		<script src="../js/vendor/highlight.pack.js"></script>

		<script src="../js/NavTree.js"></script>
		<script src="../js/SVGPan.js"></script>

		<script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>        
        
		<header id="topbar"> 
            <div class="container">
                <a class="logo" href="http://sharpdox.de" target="_blank" title="sharpDox">
                    <img src="images/logo-small.png" alt="sharpDox" />
                </a>
                <div id="breadcrumb">
					<a href="../index.html" title="Start">Start</a> > <a href="../namespace/<#= SDType.Namespace.Guid #>.html"><#= SDType.Namespace.Fullname #></a> > <a href="../type/<#= SDType.Guid #>.html"><#= SDType.Name #></a>
				</div>
            </div>
        </header>

        <section id="content" class="container">
            
			<div id="sidebar">
				<div id="docname">
					<# if (String.IsNullOrEmpty(Repository.ProjectInfo.LogoPath))
					{#>
						<a href="index.html" class="pagelink"><h1><#= Repository.ProjectInfo.ProjectName #></h1></a>
					<#}
					else
					{#>
						<a href="index.html" class="pagelink"><img src="logo.png" title="<#= Repository.ProjectInfo.ProjectName #>"/></a>
					<#}#>
				</div>
    
				<div id="navigation-container" data-nav="<#= SDType.Namespace.Fullname #>">		
				</div>				
			</div>

			<div id="documentation">

				<div id="documentation-wrapper">
					<div id="header">
						<h2 class="type-title"><#= SDMember.Name #></h2>
						<span class="namespace-title"><#= Strings.DeclaringType #>: <#= SDType.Fullname #></span>
					</div>

					<# if(!SDType.IsClassDiagramEmpty()) { #>
						<div id="sd-class-diagram">
							<#	var svg = SDType.GetClassDiagram().ToSvg(270);
								var template = new Templater(Repository, svg); #>
							<#= template.TransformText(Helper.TransformLinkToken) #>
						</div>
					<# } #>

					<div id="pagecontent">

						<h3 class="box-title first-heading"><#= Strings.Syntax #></h3>
						<div class="divider">
							<span></span>
						</div>
						<div class="syntax-box">
							<pre class="wrap-pre"><code><#= WebUtility.HtmlEncode(SDMember.Syntax) #></code></pre>
						</div>
        
						<# if(SDMember.Documentation.Count > 0) { #>

							<# if(SDMember.Documentation[CurrentLanguage].Summary.Count > 0) { #>
								<h3 class="box-title"><#= Strings.Summary #></h3>
								<div class="doc-box markdown">
									<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Summary.ToMarkdown()) #>
								</div>
							<# } #>

							<# if(SDMember.Documentation[CurrentLanguage].Remarks.Count > 0) { #>
								<h3 class="box-title"><#= Strings.Remarks #></h3>
								<div class="doc-box markdown">
									<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Remarks.ToMarkdown()) #>
								</div>
							<# } #>

							<# if(SDMember.Documentation[CurrentLanguage].Example.Count > 0) { #>
								<h3 class="box-title"><#= Strings.Example #></h3>
								<div class="doc-box markdown">
									<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Example.ToMarkdown()) #>
								</div>
							<# } #>

							<# if(SDMember.Documentation[CurrentLanguage].Returns.Count > 0) { #>
								<h3 class="box-title"><#= Strings.Returns #></h3>
								<div class="doc-box">
									<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Returns.ToMarkdown()) #>
								</div>
							<# } #>

							<# if(SDMember.Documentation[CurrentLanguage].Exceptions.Count > 0) { #>
								<h3 class="box-title"><#= Strings.Exceptions #></h3>
								<div class="doc-box markdown">
									<# foreach(var exception in SDMember.Documentation[CurrentLanguage].Exceptions) { #>
										<p><#= exception.Key #></p>
										<div class="inline">
											<#= new Markdown().Transform(exception.Value.ToMarkdown()) #>
										</div>
									<# } #>
								</div>
							<# } #>

							<# if(SDMember.Documentation[CurrentLanguage].Params.Count > 0) { #>
								<h3 class="box-title"><#= Strings.Parameters #></h3>
								<div class="doc-box markdown">
									<# foreach(var parameter in SDMember.Documentation[CurrentLanguage].Params) { #>
										<p><#= parameter.Key #></p>
										<div class="inline">
											<#= new Markdown().Transform(parameter.Value.ToMarkdown()) #>
										</div>
									<# } #>
								</div>
							<# } #>

							<# if(SDMember.Documentation[CurrentLanguage].TypeParams.Count > 0) { #>
								<h3 class="box-title"><#= Strings.TypeParameters #></h3>
								<div class="doc-box markdown">
									<# foreach(var typeParameter in SDMember.Documentation[CurrentLanguage].TypeParams) { #>
										<p><#= typeParameter.Key #></p>
										<div class="inline">
											<#= new Markdown().Transform(typeParameter.Value.ToMarkdown()) #>
										</div>
									<# } #>
								</div>
							<# } #>

						<# } #>

						<# if(SDMember is SDMethod && !((SDMethod)SDMember).IsSequenceDiagramEmpty()) { #>
							<div id="sd-sequence-diagram">
								<#	var sequenceSvg = ((SDMethod)SDMember).GetSequenceDiagram(Repository.GetAllTypes()).ToSvg(530);
									var template = new Templater(Repository, sequenceSvg); #>
								<#= template.TransformText(Helper.TransformLinkToken) #>
							</div>
							<div class="legend"><p><#= Strings.PanZoom #></p></div>
						<# } #>

					</div>
				</div>
			</div>

		</section>
    </body>
</html>

<#+ public IStrings Strings { get; set; }
	public string CurrentLanguage { get; set; }
	public SDRepository Repository { get; set; }
    public SDType SDType { get; set; }
	public SDMember SDMember { get; set; } #>